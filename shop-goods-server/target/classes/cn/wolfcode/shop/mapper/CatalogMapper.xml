<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wolfcode.shop.mapper.CatalogMapper">
    <resultMap id="BaseResultMap" type="cn.wolfcode.shop.domain.Catalog">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="sn" jdbcType="VARCHAR" property="sn"/>
        <result column="sort" jdbcType="INTEGER" property="sort"/>
        <result column="parent_id" jdbcType="BIGINT" property="parentId"/>
        <result column="is_parent" jdbcType="BIT" property="isParent"/>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM catalog
        WHERE id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="cn.wolfcode.shop.domain.Catalog"
            useGeneratedKeys="true">
        INSERT INTO catalog (name, sn, sort,
                             parent_id, is_parent)
        VALUES (#{name,jdbcType=VARCHAR}, #{sn,jdbcType=VARCHAR}, #{sort,jdbcType=INTEGER},
                #{parentId,jdbcType=BIGINT}, #{isParent,jdbcType=BIT})
    </insert>
    <update id="updateByPrimaryKey" parameterType="cn.wolfcode.shop.domain.Catalog">
        UPDATE catalog
        <set>
            <if test="name!=null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="sn!=null">
                sn = #{sn,jdbcType=VARCHAR},
            </if>
            <if test="sort!=null">
                sort = #{sort,jdbcType=VARCHAR},
            </if>
            <if test="parentId!=null">
                parent_id = #{parentId,jdbcType=VARCHAR},
            </if>
            <if test="isParent!=null">
                is_parent = #{isParent,jdbcType=VARCHAR},
            </if>
        </set>
        WHERE id = #{id,jdbcType=BIGINT}
    </update>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
            id,
            name,
            sn,
            sort,
            parent_id,
            is_parent
        FROM catalog
        WHERE id = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT
            id,
            name,
            sn,
            sort,
            parent_id,
            is_parent
        FROM catalog
    </select>
    <select id="getById" resultMap="BaseResultMap">
        SELECT
        id,
        name,
        sn,
        sort,
        parent_id,
        is_parent
        FROM catalog
        <where>
            <choose>
                <when test="id !=null">
                    parent_id = #{id}
                </when>
                <otherwise>
                    parent_id IS NULL
                </otherwise>
            </choose>
        </where>
        order by sort
    </select>
    <select id="getChildrenCountByParentId" resultType="int">
        SELECT count(0)
        FROM catalog
        WHERE parent_id = #{parentId}
    </select>
    <select id="getParentByChildrenId" resultMap="BaseResultMap">
        SELECT
            id,
            name,
            sn,
            sort,
            parent_id,
            is_parent
        FROM catalog
        WHERE id = (SELECT parent_id
                    FROM catalog
                    WHERE id = #{id})
    </select>
    <select id="selProductNum" resultType="int">
        SELECT count(0)
        FROM product
        WHERE catalog_id = #{catalogId}
    </select>
    <select id="selPropertyNum" resultType="int">
        SELECT count(0)
        FROM property
        WHERE catalog_id = #{catalogId}
    </select>
    <select id="selectAllCatalogId" resultType="long">
        SELECT id
        FROM catalog
    </select>
    <select id="maxSort" resultType="int">
        select IFNULL(max(sort),0)from catalog
        <where>
            <choose>
                <when test="parentId==null">
                    parent_id IS NULL
                </when>
                <otherwise>
                    parent_id = #{parentId}
                </otherwise>
            </choose>
        </where>
    </select>
    <select id="getParentsById" resultMap="BaseResultMap">
        SELECT
            id,
            name,
            sn,
            sort,
            parent_id
        FROM catalog
        WHERE FIND_IN_SET(id, getParentIds(#{id}))
    </select>
    <update id="updateSort">
        UPDATE catalog
        SET sort = #{sortNum}
        WHERE id = #{id}
    </update>
</mapper>